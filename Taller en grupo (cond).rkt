;1
(define (mayor x y )
  (begin
    (cond ((> x y) (display x)))
    (cond ((> y x)(display y)))
    ))
(define (principal1)
  (begin
    (mayor (read)(read))
    ))

;2
(define (ascendente x y)
  (begin
    (cond ((> x y)
           (display y )(display ",")(display x))((> y x )(display x)(display ",")(display y)))
    ))
(define (principal2)
  (begin
    (ascendente (read)(read))
    ))

;3
(define (numero x)
  (begin
    (cond ((> x 0)(display "se ha guardado como positivo"))((> 0 x)(* x x )))
    ))
(define (principal3)
  (begin
    (numero (read))
    ))

;4
(define (precio a b)
  (* a b))
(define (descuento a b)
  (cond ((> (precio a b) 100000) (* (precio a b) 0.8))
        )
  )
(define (principal4)
  (begin
    (display "Ingrese la cantidad de articulos comprados")
    (define a (read))
    (display "Ingrese el precio de la etiqueta")
    (define b (read))
    (descuento a b)
    )
  )     
;5
(define (descuentoc a b)
  (cond ((>= a 3) (* (* a b) 0.8))
        ((< a 3) (* (* a b) 0.9))
        )
  )
(define (principal5)
  (begin
    (display "Ingrese la cantidad de camisas")
    (define a (read))
    (display "Ingrese el precio de la etiqueta")
    (define b (read))
    (descuentoc a b)
    )
  )
;6
(define (descuentol a)
  (cond ((< a 5) (* a 80000))
        ((>= a 5)(* a 70000))
        )
  )
(define (principal6)
  (begin
    (display "Ingrese la cantidad de llantas: ")
    (define a (read))
    (descuentol a)
    )
  )
;7
(define (comparación_2 a b)
  (cond ((= a b) (* a b))
        ((> a b) (- a b))
        (else (+ a b))))
(define (principal7)
  (begin
    (display "Ingrese el primer número ")
    (define a (read))
    (display "Ingrese el segundo número ")
    (define b (read))
    (newline)
    (comparación_2 a b)
    )
  )
;8
(define (mayor_3 a b c)
  (cond ((and (> a b) (> a c)) a)
        ((and (> b a) (> b c)) b)
        (else c)))
(define (principal8)
  (begin
    (display "Ingrese el primer número ")
    (define a (read))
    (display "Ingrese el segundo número ")
    (define b (read))
    (display "Ingrese el tercer número ")
    (define c (read))
    (newline)
    (mayor_3 a b c)
    )
  )
;9
(define(datos edad estado_civil)
  (cond((and(>= edad 18)(= estado_civil 1)))
       (else(< edad 18)(>= estado_civil 2))))
(define(principal9)
  (displayln "Edad: ")
  (define edad (read))
  (displayln "Sexo: ")
  (define sexo (read))
  (displayln "Estado civil: ")
  (define estado_civil (read))
  (datos edad estado_civil)
  )
;10
(define (estadocivil b)
  (cond ((= b 1) "Solter@")
        ((= b 2) "Casad@")
        ))
(define (edad a)
  (cond ((>= a 18) "Mayor de edad")
        ((< a 18) "Menor de edad")
        )
  )
(define (mostrar x a b c)
  (cond ((>= a 18) "Mayor de edad")
        ((< a 18) "Menor de edad")
        )
  (cond ((= b 1) "Solter@")
        ((= b 2) "Casad@")
        )
  (cond ((= c 1)
         (cond ((and (>= a 18) (= b 2))
                (begin
                  (display "Mujer")
                  (newline)
                  (display "Mayor de edad")
                  (newline)
                  (display "Casada")
                  )
                "Mujer")))
        ((= c 2)
         (cond ((= b 1) x)
               ((= b 2) "Hombre")
               )
         )
        ))
  
(define (principal10)
  (display "Ingrese su nombre")
  (define x (read))
  (display "Ingrese su estado civil (1. soter@, 2. Casado)")
  (define b (read))
  (display "Ingrese su edad")
  (define a (read))
  (display "Ingrese su género")
  (define c (read))
  (mostrar x a b c)
  )
;11
(define(etapa x)
  (cond
    ((and(>= x 0)(<= x 12)
         (display "1: niño"))))
  (cond
    ((and(>= x 13)(<= x 18)
         (display "2: joven"))))
  (cond
    ((and(>= x 19)
         (display "3: adulto")))))
(define (principal11)
  (begin
    (display "ingrese la edad del sujeto: ")
    (define x (read))
    (newline)
    (display "El sujeto es: ")
    (etapa x)
    )
  )

;12
(define (seguro x )
  (cond ((< x 500000) (+ x (* x 0.03)))
        (else (+ x (* x 0.02)))
        )
  )
(define (principal12)
  (begin
    (display "Ingrese el precio del seguro: ")
    (newline)
    (define x (read))
    (display "El precio es: ")
    (display (seguro x))
    )
  )

;13
(define(pago_matricula estrato patrimonio matricula)
  (cond
    ((and(>= estrato 3)(>= patrimonio 2000000))(+ matricula (* matricula 0.3)))
    (else matricula)))
(define (principal13)
  (begin
    (define matricula 500000)
    (displayln "Patrimonio es: ")
    (define patrimonio (read))
    (displayln "Estrato es: ")
    (define estrato (read))
    (displayln "Nombre es: ")
    (define nombre (read))
    (display " El pago de matricula es: ")
    (pago_matricula estrato patrimonio matricula)
    )
  )
;14
(define (facturacion x y z)
  (begin
    (cond ((<= y 2)(display "señor/a ")(display x)(display " su total a pagar sera: ")(+ 80000 (* (/ 80000 100) 5))))
    (cond ((= y 3)(display "señor/a ")(display x)(display " su total a pagar sera: ")(+ 80000 (* (/ 80000 100) 10))))
    (cond ((= y 4)(display "señor/a ")(display x)(display " su total a pagar sera: ")(+ 80000 (* (/ 80000 100) 10))))
    (cond ((>= y 5)(display "señor/a ")(display x)(display " su total a pagar sera: ")(+ 80000 (* (/ 80000 100) 20))))
    )) 
(define (principal14)
  (begin
    (display "ingrese en orden, su nombre, su estrato, y su direccion : ")
    (facturacion (read)(read)(read))
    ))
;ejercicio 15
(define ABACO 1)
(define (iva x)
  (begin
    (+ (*(/ x 100)16) x)))
(define (computo x y )
  (begin
    (cond ((>= x 1000000)(- x (*(/ x 100) 10))))
    (cond ((< x 1000000)x))
    (cond (= y 1) (>= x 1000000))(- (- x ((/ x 100) 10))((/(- x (*(/ x 100)10)) 100) 5))
    (cond (= y 1)(< x 1000000))(- x(*(/ x 100) 5)))
  )
(define (principal15)
  (begin
    (display "ingresar valor y marca del coputador (en mayusuculas)")
    (iva (computo (read)(read)))
    ))
;16
(define (horas_ex b a)
  (cond ((and (<= (- b 48) 8) (> (- b 48) 0)) (* (- b 48) (* 2 a)))
        (else {+ [* (- b 48) (* 2 a)] [* (- b 56) (* 3 a)]})
        )
  )
(define (salario x y z) (cond ((<= x 48 ) (* x y))
                              (else (horas_ex x y))
                              )
  ) 
(define (principal16)
  (begin
    (displayln "digite el salario por horas")
    (define salario_h (read)) 
    (displayln "digite las horas trabajadas")
    (define horas (read))

    (salario horas salario_h (horas_ex horas salario_h))
    )
  )
;17
(define (valor_peras a b)
  (cond ((and (>= a 3) (<= a 5)) (* (* a b) 0.90) )
        ((and (>= a 6) (<= a 10)) (* (* a b) 0.85) )
        ((>= a 11) (* (* a b) 0.82))
        (else (* a b))
        )
  )
(define (principal17)
  (begin
    (displayln "Digite el número de peras compradas")
    (define peras (read))
    (displayln "Digite el costo normal de cada pera")
    (define costo (read))
    (displayln "El costo a pagar es de :")
    (valor_peras peras costo)
    )
  )
;18
(define (utilidad a b)
  (cond ((and(>= a 1) (< a 2)) (ceiling(* (* a b) 1.07)))
        ((and(>= a 2) (< a 5)) (ceiling(* (* a b) 1.10)))
        ((and(>= a 5) (< a 10)) (ceiling(* (* a b) 1.15)))
        ((>= a 10) (ceiling(* (* a b) 1.20)))
        (else (ceiling(* (* a b) 1.05)))
        )
  )
(define (principal18)
  (begin
    (displayln "Cuantos años lleva trabajando en esta empresa?")
    (define años (read))
    (displayln "Digite su salario mensual")
    (define salario (read))
    (display "Su salario anual sera de :")
    (utilidad años salario)
    )
  )
;19
(define (valor_llantas a)
  (cond ((and (>= a 5) (<= a 10)) (* a 25000))
        ((> a 10) (* a 20000))
        (else (* a 30000))
        )
  )
(define (principal19)
  (begin
    (displayln "Digite el número de llantas compradas")
    (define llantas (read))
    (display "El precio que deberá pagar es de :")
    (valor_llantas llantas)
    )
  )
;20
(define (valor_T a b c d e)
  (cond ((and (= b 2) (and (= c 1) (and (>= a 35) (<= a 45)))) (* 3 e))
        ((and (= b 1) (and (= d 1) (< a 30))) (/ e 3))
        ((and (= b 2) (and (= d 3) (> a 55))) (- e 50000))
        (else e)
        )
  )
(define (principal20)
  (begin
    (displayln "Digite su edad")
    (define edad (read))
    (displayln "Digite su sexo, 1=hombre 2=mujer")
    (define sexo (read))
    (displayln "Digite su tipo, 1=alto 2=bajo 3=medio")
    (define tipo (read))
    (displayln "Digite su nacionalidad 1=Latino 2=Alemán 3=Hindú y 4=Colombiano")
    (define nacionalidad (read))
    (displayln "Digite su valor")
    (define valor (read))
    (display "Su valor es igual a :")
    (valor_T edad sexo tipo nacionalidad valor)
    )
  )
(define (principaldefinitivo a)
  (cond ((= a 1) (principal1))
        ((= a 2) (principal2))
        ((= a 3) (principal3))
        ((= a 4) (principal4))
        ((= a 5) (principal5))
        ((= a 6) (principal6))
        ((= a 7) (principal7))
        ((= a 8) (principal8))
        ((= a 9) (principal9))
        ((= a 10) (principal10))
        ((= a 11) (principal11))
        ((= a 12) (principal12))
        ((= a 13) (principal13))
        ((= a 14) (principal14))
        ((= a 15) (principal15))
        ((= a 16) (principal16))
        ((= a 17) (principal17))
        ((= a 18) (principal18))
        ((= a 19) (principal19))
        ((= a 20) (principal20))
        ))
(define (Principal)
  (begin
    (display "Ingrese el punto que quiere visualizar")
    (define a (read))
    (principaldefinitivo a)
    )
  )
(Principal)
                 

              
